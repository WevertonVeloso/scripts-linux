#!/usr/bin/env bash
#=================================================================
# Nome do script : log_rotate.sh
# Descrição      : Script de rotação de logs com funcionalidade semelhante ao logrotate
# Autor          : Weverton
# Data           : 16-11-24
# Versão         : 0.3
#=================================================================

# Configurações principais
LOG_FILE="/root/pasta/teste"  # Arquivo de log base a ser rotacionado
DELAY=4                      # Número de backups antes da compressão
MAX_BACKUPS=7                # Número máximo de backups a serem mantidos
LOG_OUTPUT="/var/log/log_rotate_script.log"  # Local para registrar execuções (opcional)

# Função para registrar mensagens no log de execução
log_message() {
    local message="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a "$LOG_OUTPUT"
}

# Função para validar as configurações iniciais
validate_config() {
    if [[ ! -f "$LOG_FILE" ]]; then
        log_message "Erro: Arquivo de log base não encontrado: $LOG_FILE"
        exit 1
    fi
    if [[ "$DELAY" -lt 0 || "$MAX_BACKUPS" -lt 1 ]]; then
        log_message "Erro: Valores inválidos para DELAY ($DELAY) ou MAX_BACKUPS ($MAX_BACKUPS)"
        exit 1
    fi
}

# Função para rotacionar os arquivos existentes
rotate_logs() {
    log_message "Iniciando rotação de logs para $LOG_FILE"

    # Listar e processar os arquivos rotacionados, ordenados pelo tempo (mais antigos primeiro)
    ls -tr "${LOG_FILE}".* 2>/dev/null | while read -r LOG_ROTATED; do
        CURRENT_SUFFIX="${LOG_ROTATED##*.}"

        if [[ "$CURRENT_SUFFIX" != "gz" ]]; then
            # Arquivos não compactados
            NEW_SUFFIX=$((CURRENT_SUFFIX + 1))
            mv "$LOG_ROTATED" "${LOG_ROTATED%.*}.$NEW_SUFFIX"
            log_message "Rotacionado: $LOG_ROTATED -> ${LOG_ROTATED%.*}.$NEW_SUFFIX"

            if [[ "$NEW_SUFFIX" -gt "$DELAY" ]]; then
                gzip "${LOG_ROTATED%.*}.$NEW_SUFFIX"
                log_message "Compactado: ${LOG_ROTATED%.*}.$NEW_SUFFIX.gz"
            fi
        else
            # Arquivos compactados
            PREFIX="${LOG_ROTATED%.*}"
            COMPRESSED_SUFFIX="${PREFIX##*.}"

            if [[ "$COMPRESSED_SUFFIX" -lt "$MAX_BACKUPS" ]]; then
                NEW_COMPRESSED_SUFFIX=$((COMPRESSED_SUFFIX + 1))
                mv "$LOG_ROTATED" "${LOG_FILE%.*}.$NEW_COMPRESSED_SUFFIX.gz"
                log_message "Renomeado: $LOG_ROTATED -> ${LOG_FILE%.*}.$NEW_COMPRESSED_SUFFIX.gz"
            else
                rm "$LOG_ROTATED"
                log_message "Removido: $LOG_ROTATED (limite de backups atingido)"
            fi
        fi
    done
}

# Função para rotacionar o arquivo atual
rotate_current_log() {
    mv "$LOG_FILE" "${LOG_FILE}.1"
    log_message "Arquivo atual rotacionado: $LOG_FILE -> ${LOG_FILE}.1"

    if [[ "$DELAY" -eq 0 ]]; then
        gzip "${LOG_FILE}.1"
        log_message "Compactado imediatamente: ${LOG_FILE}.1.gz"
    fi

    : > "$LOG_FILE"
    log_message "Novo arquivo de log criado: $LOG_FILE"
}

# Execução principal
validate_config
rotate_logs
rotate_current_log
log_message "Rotação concluída com sucesso!"
